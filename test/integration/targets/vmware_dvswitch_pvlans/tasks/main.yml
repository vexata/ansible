# Test code for the vmware_dvswitch_pvlans module.
# Copyright: (c) 2018, Christian Kotte <christian.kotte@gmx.de>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Wait for Flask controller to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 5000
    state: started

- name: kill vcsim
  uri:
    url: http://{{ vcsim }}:5000/killall

- name: start vcsim
  uri:
    url: http://{{ vcsim }}:5000/spawn?cluster=2
  register: vcsim_instance

- name: Wait for vcsim server to come up online
  wait_for:
    host: "{{ vcsim }}"
    port: 443
    state: started

- name: get a list of Datacenter from vcsim
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DC
  register: datacenters

- debug: var=vcsim_instance
- debug: var=datacenters

# Testcase 0001: Add Distributed vSwitch
- name: add distributed vSwitch
  vmware_dvswitch:
    validate_certs: False
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    datacenter_name: "{{ item | basename }}"
    state: present
    switch_name: dvswitch_0001
    mtu: 9000
    uplink_quantity: 2
    discovery_proto: lldp
    discovery_operation: both
  register: dvs_result_0001
  with_items:
    - "{{ datacenters['json'] }}"

- name: ensure distributed vswitch is present
  assert:
    that:
        - "{{ dvs_result_0001.changed == true }}"

- name: get a list of distributed vswitch from vcsim after adding
  uri:
    url: http://{{ vcsim }}:5000/govc_find?filter=DVS
  register: new_dvs_0001

- debug:
    msg: "{{ item | basename }}"
  with_items: "{{ new_dvs_0001['json'] }}"

- set_fact: new_dvs_name="{% for dvs in new_dvs_0001['json'] %} {{ True if (dvs | basename) == 'dvswitch_0001' else False }}{% endfor %}"

- debug: var=new_dvs_name
- assert:
    that:
      - "{{ 'True' in new_dvs_name }}"

- name: Configure PVLANs in check mode
  vmware_dvswitch_pvlans:
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    switch: dvswitch_0001
    primary_pvlans:
      - primary_pvlan_id: 1
      - primary_pvlan_id: 4
    secondary_pvlans:
      - primary_pvlan_id: 1
        secondary_pvlan_id: 2
        pvlan_type: isolated
      - primary_pvlan_id: 1
        secondary_pvlan_id: 3
        pvlan_type: community
      - primary_pvlan_id: 4
        secondary_pvlan_id: 5
        pvlan_type: community
    validate_certs: no
  register: pvlans_result_check_mode
  check_mode: yes

- name: ensure pvlans were configured
  assert:
    that:
        - pvlans_result_check_mode.changed

- name: Configure PVLANs
  vmware_dvswitch_pvlans:
    hostname: "{{ vcsim }}"
    username: "{{ vcsim_instance['json']['username'] }}"
    password: "{{ vcsim_instance['json']['password'] }}"
    switch: dvswitch_0001
    primary_pvlans:
      - primary_pvlan_id: 1
      - primary_pvlan_id: 4
    secondary_pvlans:
      - primary_pvlan_id: 1
        secondary_pvlan_id: 2
        pvlan_type: isolated
      - primary_pvlan_id: 1
        secondary_pvlan_id: 3
        pvlan_type: community
      - primary_pvlan_id: 4
        secondary_pvlan_id: 5
        pvlan_type: community
    validate_certs: no
  register: pvlans_result

- name: ensure pvlans were configured
  assert:
    that:
        - pvlans_result.changed
